---
- name: "Check if variables are defined"
  include_tasks: check_variables.yml

- name: "Attempt to stop server"
  include_tasks: stop_server.yml

- name: "SELinux typing"
  include_tasks: selinux.yml

- name: "Ensure Springboot application folder sb_appbase={{ sb_appbase }} is removed"
  file:
    path: "{{ sb_appbase }}/"
    state: absent
    follow: no
  become: "{{ sb_become }}"

- name: "Create {{ sb_appname }} base directory sb_appbase={{ sb_appbase }}"
  file:
    path: "{{ sb_appbase }}"
    state: directory
    mode: "{{ sb_appbase_mode }}"
    owner: springboot
    group: springboot
    seuser: system_u
    serole: object_r
  become: "{{ sb_become }}"

- name: "Install Java packages"
  include_tasks: java.yml

- name: "Create {{ sb_appname }} log directory sb_log_dir={{ sb_log_dir }}"
  file:
    path: "{{ sb_log_dir }}"
    state: directory
    mode: "{{ sb_log_dir_mode }}"
    owner: springboot
    group: springboot
    seuser: system_u
    serole: object_r
    setype: springboot_log_t
  become: "{{ sb_become }}"

- name: "Create {{ sb_appname }} tmp/cache/work directory sb_srv_dir={{ sb_srv_dir }}"
  file:
    path: "{{ sb_srv_dir }}"
    state: directory
    mode: "{{ sb_log_dir_mode }}"
    owner: springboot
    group: springboot
    seuser: system_u
    serole: object_r
    setype: springboot_var_t
  become: "{{ sb_become }}"

- name: "Create {{ sb_appname }} dynamic libraries directory sb_srv_dir={{ sb_srv_dir }}"
  file:
    path: "{{ sb_srv_dir }}/dynlib"
    state: directory
    mode: "{{ sb_log_dir_mode }}"
    owner: springboot
    group: springboot"
    seuser: system_u
    serole: object_r
    setype: springboot_dynlib_t
  become: "{{ sb_become }}"

- name: "Create application subfolders with default/configured ownership & permissions (if each is different than sb_appbase={{ sb_appbase }})"
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    seuser: system_u
    serole: object_r
    setype: "{{ item.seltype }}"
  loop: "{{ sb_folders }}"
  when: item.path != sb_appbase
  become: "{{ sb_become }}"

- name: "Create symlink of {{ sb_log_dir }} to {{ sb_appbase }}/logs block"
  block:
    - name: "Stat {{ sb_appbase }}/logs"
      stat:
        path: "{{ sb_appbase }}/logs"
      register: stat_dest_logs_dir

    - name: "Create logs symlink"
      file:
        src: "{{ sb_log_dir }}"
        dest: "{{ sb_appbase }}/logs"
        owner: "{{ sb_log_dir_user }}"
        group: "{{ sb_log_dir_group }}"
        state: link
        force: true
      when: not stat_dest_logs_dir.stat.exists

  become: "{{ sb_become }}"
  when: sb_log_symlink

- name: "Register Springboot service (RHEL 7 and higher)"
  include_tasks: configure_service.yml
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version|int >= 7
    - sb_become

- name: "Copy Springboot application"
  copy:
    remote_src: yes
    src: "{{ sb_workdir }}/{{ sb_appjarname }}"
    dest: "{{ sb_jar_location }}/"
    owner: "springboot"
    group: "springboot"
    mode: "{{ sb_app_mode }}"
    seuser: system_u
    serole: object_r
    setype: springboot_lib_t
  become: "{{ sb_become }}"
  notify:
    #- "Start Springboot instance"
    - "Cleanup workdir"

- name: "Get conf structure"
  local_action:
    module: find
    path: "{{ sb_conf_src }}"
    recurse: yes
    file_type: any
  register: sb_find_conf_files

- name: "Create the conf subdirectories in {{ sb_appbase_conf_location }}/"
  file:
    path: "{{ item.path | regex_replace(sb_conf_src|regex_escape(), sb_appbase_conf_location) }}"
    state: directory
    owner: springboot
    group: springboot
    mode: "{{ sb_conf_mode }}"
    seuser: system_u
    serole: object_r
    setype: springboot_conf_t
  loop: "{{ sb_find_conf_files.files }}"
  when: item.isdir
  become: "{{ sb_become }}"

- name: "Copy Springboot conf files in {{ sb_appbase_conf_location }}/"
  template:
    src: "{{ item.path }}"
    dest: "{{ item.path | regex_replace(sb_conf_src|regex_escape(), sb_appbase_conf_location) }}"
    owner: springboot
    group: springboot
    mode: "{{ sb_conf_mode }}"
    seuser: system_u
    serole: object_r
    setype: springboot_conf_t
  become: "{{ sb_become }}"
  loop: "{{ sb_find_conf_files.files }}"
  when: not item.isdir
  notify:
    - "Cleanup workdir"
    - "restorecon_springboot_instance"

- name: "Copy Springboot Java security properties file to {{ sb_java_security_file }}"
  template:
    src: "{{ sb_java_security_file_src }}"
    dest: "{{ sb_java_security_file }}"
    owner: springboot
    group: springboot
    mode: "{{ sb_conf_mode }}"
    seuser: system_u
    serole: object_r
    setype: springboot_conf_t
  become: "{{ sb_become }}"
  when: sb_java_security_file_src is defined and sb_java_security_file_src|length > 0
  notify:
    - "Cleanup workdir"
    - "restorecon_springboot_instance"

- block:
  - name: "Ensure the folder sb_extra_files_dest={{ sb_extra_files_dest }} exists (in case is different than sb_appbase={{ sb_appbase }} , sb_appbase_conf_location={{ sb_appbase_conf_location }} & sb_jar_location={{ sb_jar_location }})"
    file:
      path: "{{ sb_extra_files_dest }}"
      state: directory
      owner: springboot
      group: springboot
      mode: "{{ sb_extra_files_mode }}"
      seuser: system_u
      serole: object_r
    when: sb_extra_files_dest != sb_appbase and sb_extra_files_dest != sb_appbase_conf_location and sb_extra_files_dest != sb_jar_location
    become: "{{ sb_become }}"

  - name: "Copy other/extra files needed by the application from {{ sb_extra_files_src }}/ to {{ sb_extra_files_dest }}/"
    copy:
      src: "{{ sb_extra_files_src }}/"
      dest: "{{ sb_extra_files_dest }}/"
      owner: springboot
      group: springboot
      mode: "{{ sb_extra_files_mode }}"
      seuser: system_u
      serole: object_r
    become: "{{ sb_become }}"
    notify:
      - "restorecon_springboot_instance"
  when: sb_extra_files_src is defined and sb_extra_files_src|length > 0 and sb_extra_files_dest is defined and sb_extra_files_dest|length >0

- block:
  - name: "Ensure the destination folder of the keystores & certificates (sb_keystores_dest={{ sb_keystores_dest}}) exists (in case is different than sb_appbase={{ sb_appbase }} , sb_appbase_conf_location={{ sb_appbase_conf_location }} , sb_extra_files_dest={{ sb_extra_files_dest }} & sb_jar_location={{ sb_jar_location }})"
    file:
      path: "{{ sb_keystores_dest }}"
      state: directory
      owner: springboot
      group: springboot
      mode: "{{ sb_keystores_mode }}"
      seuser: system_u
      serole: object_r
      setype: springboot_auth_t
    become: "{{ sb_become }}"
    when: sb_keystores_dest != sb_appbase and sb_keystores_dest != sb_appbase_conf_location and sb_keystores_dest != sb_extra_files_dest and sb_keystores_dest != sb_jar_location

  - name: "Copy keystores & certificates from {{ sb_keystores_src }}/ to {{ sb_keystores_dest }}/"
    copy:
      src: "{{ sb_keystores_src }}/"
      dest: "{{ sb_keystores_dest }}/"
      owner: springboot
      group: springboot
      mode: "{{ sb_keystores_mode }}"
      seuser: system_u
      serole: object_r
      setype: springboot_auth_t
    become: "{{ sb_become }}"
    notify:
      - "restorecon_springboot_instance"
  when: sb_keystores_src is defined and sb_keystores_src|length > 0 and sb_keystores_dest is defined and sb_keystores_dest|length >0

- name: "Audit rules for {{ sb_appname }}"
  include_tasks: audits.yml
  when: audit_keyword is defined and audit_keyword|length > 0 and environment == "P"

- name: "Cron to purge {{ sb_appname }} logs"
  include_tasks: cron.yml

